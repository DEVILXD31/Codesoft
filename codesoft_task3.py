# -*- coding: utf-8 -*-
"""CodeSoft Task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NSG1SMIHKVJBdmHNBgC5fKtFjhBwFILe
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset from the uploaded file

iris_df = pd.read_csv('IRIS.csv')

# Display the first few rows of the dataset
print(iris_df.head())
print(iris_df.describe())
print(iris_df.info())

# Check for missing values
print("\nMissing values in the dataset:")
print(iris_df.isnull().sum())

# Visualizing the data
sns.pairplot(iris_df, hue="species", markers=["o", "s", "D"])
plt.show()

# Splitting the dataset into features and target variable
X = iris_df.drop(columns=['species'])
y = iris_df['species']

# Splitting the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Training the KNN classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# Making predictions
y_pred = knn.predict(X_test)

# Evaluating the model
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nAccuracy Score:")
print(accuracy_score(y_test, y_pred))

# Visualizing the results
plt.figure(figsize=(8,6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap='Blues', fmt='g')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()